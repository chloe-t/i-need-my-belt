name: 'Terraform'

on:
  push:
    branches: 
      - '**'
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Authenticate to Google Cloud for Terraform to access it
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{secrets.GCP_SA_KEY}}      

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -list=true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        TF_VAR_GOOGLE_APPLICATION_CREDENTIALS: ${{secrets.GCP_SA_KEY}}
      run: terraform plan -input=false


      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      env:
        TF_VAR_GOOGLE_APPLICATION_CREDENTIALS: ${{secrets.GCP_SA_KEY}}
      run: terraform apply -auto-approve -input=false


    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Create instance scheduler
      run: gcloud compute resource-policies create instance-schedule gitlab-instance-schedule --description='Auto start & stop schedule for gitlab instance' --region='us-west1' --vm-start-schedule='45 7 * * 1-5' --vm-stop-schedule='30 18 * * 0-6' --timezone='Europe/Paris'

    - name: Attach instance scheduler to VM
      run: gcloud compute instances add-resource-policies i-need-my-belt-gitlab-instance --resource-policies=gitlab-instance-schedule
